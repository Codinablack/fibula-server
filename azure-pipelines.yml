# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'                    # other valid values include: 'ubuntu-latest' | 'macOS-latest'

variables:
  BuildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: '3.0.x'
    packageType: runtime
    performMultiLevelLookup: true
    includePreviewVersions: true              # Required for preview versions

- task: DotNetCoreCLI@2
  displayName: 'Install Coverlet.Console'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g coverlet.console'
    
- task: DotNetCoreCLI@2
  displayName: 'Install Codecov.Tool'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g Codecov.Tool'

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g dotnet-reportgenerator-globaltool'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 5.3.1'
  inputs:
    versionSpec: 5.3.1

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '$(BuildSolution)'
    feedsToUse: 'config'
    nugetConfigPath: 'NuGet.config'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'
    projects: '**/*.Tests/*.csproj'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- script: reportgenerator "-reports:$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)\CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura"
  displayName: 'Create Code coverage report'
  
- script: ls -R
  displayName: 'debug contents'

- script: codecov -f $(Build.SourcesDirectory)/TestResults/Coverage/coverage.covertura.xml
  displayName: 'Upload to CodeCov.io'
