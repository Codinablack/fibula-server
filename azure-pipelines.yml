# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  name: Azure Pipelines
  vmImage: windows-latest                     # other valid values include: 'windows-latest' | 'macOS-latest'
  demands:
  - msbuild
  - visualstudio
  - vstest

jobs:
- job: Build
  variables:
    BuildSolution: FibulaMMO.sln
    BuildPlatform: Any CPU
  strategy:
    matrix:
      Debug:
        BuildConfiguration: Debug
        _debugArg: '-Debug'
      Release:
        BuildConfiguration: Release
        _debugArg: ''

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      version: '3.0.x'
      packageType: runtime
      performMultiLevelLookup: true
      includePreviewVersions: true              # Required for preview versions

  - task: DotNetCoreCLI@2
    displayName: 'Install Codecov.Tool'
    inputs:
      command: custom
      custom: tool
      arguments: 'install -g Codecov.Tool'

  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator'
    inputs:
      command: custom
      custom: tool
      arguments: 'install -g dotnet-reportgenerator-globaltool'

  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 5.3.1'
    inputs:
      versionSpec: 5.3.1

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: '$(BuildSolution)'
      feedsToUse: 'config'
      nugetConfigPath: 'NuGet.config'
  
  - task: VSBuild@1
    displayName: 'Build solution FibulaMMO.sln'
    inputs:
      solution: '$(BuildSolution)'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      msbuildArgs: '/bl'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests'
    inputs:
      command: test
      arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/TestResults/ /p:CoverletOutputFormat=cobertura'
      projects: '**/*.Tests/*.csproj'

  - script: reportgenerator "-reports:$(Agent.TempDirectory)\TestResults\**\coverage.cobertura.xml" "-targetdir:$(Agent.TempDirectory)\CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    condition: succeededOrFailed()
    displayName: 'Create Code coverage report'

  - script: codecov -f $(Agent.TempDirectory)\CodeCoverage\Cobertura.xml
    condition: succeededOrFailed()
    displayName: 'Upload to CodeCov.io'
